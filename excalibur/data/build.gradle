
apply plugin: 'com.android.library'
apply plugin: 'com.neenbedankt.android-apt'
apply plugin: 'me.tatarka.retrolambda'

android {
    defaultPublishConfig "debug"

    def globalConfiguration = rootProject.extensions.getByName("ext")

    compileSdkVersion globalConfiguration.getAt("androidCompileSdkVersion")
    buildToolsVersion globalConfiguration.getAt("androidBuildToolsVersion")

    defaultConfig {
        minSdkVersion globalConfiguration.getAt("androidMinSdkVersion")
        targetSdkVersion globalConfiguration.getAt("androidTargetSdkVersion")
        versionCode globalConfiguration.getAt("androidVersionCode")

        buildConfigField "int", "CORE_POOL_SIZE", "3"
        buildConfigField "int", "MAXIMUM_POOL_SIZE", "5"
        buildConfigField "long", "KEEP_ALIVE_TIME", "10"
        buildConfigField "int", "READ_TIMEOUT", "60"
        buildConfigField "int", "CONNECT_TIMEOUT", "60"

    }
    buildTypes {
        release {
            buildConfigField "String", "DISCOVER_API_URL", '"http://10.16.4.8:10100/v1/"'
            buildConfigField "String", "ITINERARY_API_URL", '"http://demo8197184.mockable.io/"'
            buildConfigField "String", "GUEST_API_URL", '"http://10.16.6.134:8090/v1/"'
            buildConfigField "String", "SHIP_TIME_API_URL", '"http://10.16.6.134:8090/v1/"'
        }
        debug {
            buildConfigField "String", "DISCOVER_API_URL", '"http://10.16.4.8:10100/v1/"'
            buildConfigField "String", "ITINERARY_API_URL", '"http://demo8197184.mockable.io/"'
            buildConfigField "String", "GUEST_API_URL", '"http://10.16.6.134:8090/v1/"'
            buildConfigField "String", "SHIP_TIME_API_URL", '"http://10.16.6.134:8090/v1/"'
        }
    }
    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }

    packagingOptions {
        exclude 'LICENSE.txt'
        exclude 'META-INF/DEPENDENCIES'
        exclude 'META-INF/ASL2.0'
        exclude 'META-INF/NOTICE'
        exclude 'META-INF/LICENSE'
    }

    lintOptions {
        quiet true
        abortOnError false
        ignoreWarnings true
        disable 'InvalidPackage'  // Some libraries have issues with this
        disable 'OldTargetApi'    // Due to Robolectric that modifies the manifest when running tests
    }
}

dependencies {
    def generalDependencies = rootProject.ext.generalDependencies
    def dataDependencies = rootProject.ext.dataDependencies
    def testDependencies = rootProject.ext.dataTestDependencies

    compile project(':domain')
    provided dataDependencies.javaxAnnotation
    compile dataDependencies.okHttp
    compile dataDependencies.gson
    compile dataDependencies.rxJava
    compile dataDependencies.rxAndroid
    compile dataDependencies.androidAnnotations
    compile dataDependencies.activeAndroid
    compile dataDependencies.retrofit
    compile dataDependencies.retrofitGson
    compile dataDependencies.okHttpLogging
    compile generalDependencies.timber

    testCompile testDependencies.junit
    testCompile testDependencies.assertj
    testCompile testDependencies.mockito
    testCompile testDependencies.robolectric
}

apply plugin: 'checkstyle'

task checkstyle(type: Checkstyle) {
    source 'src'
    include '**/*.java'
    exclude '**/gen/**'
    exclude '**/R.java'
    exclude '**/BuildConfig.java'

    def configProps = ['proj.module.dir': projectDir.absolutePath]
    configProperties configProps

    classpath = files()

}

preBuild.dependsOn('checkstyle')
