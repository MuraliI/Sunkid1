
apply plugin: 'com.android.library'
apply plugin: 'me.tatarka.retrolambda'

android {
    defaultPublishConfig "debug"

    def globalConfiguration = rootProject.extensions.getByName("ext")
    def API_KEY = '"13vRHenOdMnGWw64GYwKFavdjRJjITTR"'
    def BASE_URL_CLOUD = 'http://10.16.6.134:8090/'
    def API_COMMERCE_URL = '"' + BASE_URL_CLOUD + 'test/search-api/v1/' + '"'
    def API_NON_COMMERCE_URL = '"' + BASE_URL_CLOUD + 'test/v1/' + '"'

    compileSdkVersion globalConfiguration.getAt("androidCompileSdkVersion")
    buildToolsVersion globalConfiguration.getAt("androidBuildToolsVersion")

    defaultConfig {
        minSdkVersion globalConfiguration.getAt("androidMinSdkVersion")
        targetSdkVersion globalConfiguration.getAt("androidTargetSdkVersion")
        versionCode globalConfiguration.getAt("androidVersionCode")

        buildConfigField "int", "CORE_POOL_SIZE", "3"
        buildConfigField "int", "MAXIMUM_POOL_SIZE", "5"
        buildConfigField "long", "KEEP_ALIVE_TIME", "10"
        buildConfigField "int", "READ_TIMEOUT", "60"
        buildConfigField "int", "CONNECT_TIMEOUT", "60"

        buildConfigField "int", "DOWNLOAD_PRODUCTS_TIME", "1"  //hours


    }
    buildTypes {
        debug {
            buildConfigField "String", "API_KEY", API_KEY
            buildConfigField "String", "DISCOVER_API_URL", API_COMMERCE_URL
            buildConfigField "String", "MOCKABLE_IO_API_URL", '"http://demo8197184.mockable.io/"'
            buildConfigField "String", "GUEST_API_URL", API_NON_COMMERCE_URL
            buildConfigField "String", "SAIL_API_URL", API_NON_COMMERCE_URL
            buildConfigField "String", "SHIP_TIME_API_URL", API_NON_COMMERCE_URL
            //TODO this URL it will be use ONLY for demo.
            buildConfigField "String", "MENUS_API_URL", '"http://demo8197184.mockable.io/"'
            //buildConfigField "String", "MENUS_API_URL", API_COMMERCE_URL

        }
        release.initWith(debug)
    }
    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }

    packagingOptions {
        exclude 'LICENSE.txt'
        exclude 'META-INF/DEPENDENCIES'
        exclude 'META-INF/ASL2.0'
        exclude 'META-INF/NOTICE'
        exclude 'META-INF/LICENSE'
    }

    lintOptions {
        quiet true
        abortOnError false
        ignoreWarnings true
        disable 'InvalidPackage'  // Some libraries have issues with this
        disable 'OldTargetApi'    // Due to Robolectric that modifies the manifest when running tests
    }
}

dependencies {
    def generalDependencies = rootProject.ext.generalDependencies
    def dataDependencies = rootProject.ext.dataDependencies
    def testDependencies = rootProject.ext.dataTestDependencies

    compile project(':domain')
    provided dataDependencies.javaxAnnotation

    compile dataDependencies.okHttp,
            dataDependencies.gson,
            dataDependencies.rxJava,
            dataDependencies.rxAndroid,
            dataDependencies.androidAnnotations,
            dataDependencies.activeAndroid,
            dataDependencies.retrofit,
            dataDependencies.retrofitGson,
            dataDependencies.okHttpLogging,
            generalDependencies.timber

    testCompile testDependencies.junit,
                testDependencies.assertj,
                testDependencies.mockito,
                testDependencies.robolectric,
                presentationTestDependencies.powermockModuleJunit4,
                presentationTestDependencies.powermockApiMockitoV

    androidTestCompile presentationTestDependencies.mockito,
            presentationTestDependencies.dexmaker,
            presentationTestDependencies.dexmakerMockito
}

apply plugin: 'checkstyle'

task checkstyle(type: Checkstyle) {
    source 'src'
    include '**/*.java'
    exclude '**/gen/**'
    exclude '**/R.java'
    exclude '**/BuildConfig.java'

    def configProps = ['proj.module.dir': projectDir.absolutePath]
    configProperties configProps

    classpath = files()

}

preBuild.dependsOn('checkstyle')
